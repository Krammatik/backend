openapi: 3.0.3
info:
  title: Krammatik backend
  description: Krammatik backend
  version: 1.0.0
servers:
  - url: 'http://localhost:8080'
  - url: 'https://krammatik.deathsgun.xyz'
paths:
  /auth/login:
    post:
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        200:
          description: Successful authentication the token for request is in the response body
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        400:
          description: No username or password provided
        401:
          description: User not found or password invalid
      tags:
        - authentication
  /auth/validate:
    get:
      security:
        - bearerAuth: [ ]
      responses:
        401:
          $ref: "#/components/responses/UnauthorizedError"
        204:
          description: AuthSessionId is valid and can be used for further requests
      tags:
        - authentication
  /auth/register:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Credentials"
      responses:
        201:
          description: User has been successfully created and can be used to login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        403:
          description: There is already a user with the given username in existance
          content:
            applcation/json:
              schema:
                $ref: "#/components/schemas/Error"
      tags:
        - authentication
  /users:
    get:
      tags:
        - user
      security:
        - bearerAuth: [ "user" ]
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: count
          in: query
          schema:
            type: integer
      responses:
        200:
          description: A list of all users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /users/user:
    get:
      security:
        - bearerAuth: [ "user" ]
      tags:
        - user
      responses:
        200:
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
          description: Returns the current logged in user
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
          format: uuid
    get:
      tags:
        - user
      security:
        - bearerAuth: [ "user" ]
      responses:
        200:
          description: The user by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        404:
          description: Gets returned when the user does not exits
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /task:
    post:
      tags:
        - task
      security:
        - bearerAuth: [ "creator" ]
      responses:
        201:
          description: The successfully created task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          description: Gets returned when the user is not a creator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - task
      security:
        - bearerAuth: [ "user" ]
      responses:
        200:
          description: A list of all tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /task/{id}:
    parameters:
      - name: id
        required: true
        in: path
        schema:
          type: string
          format: uuid
    get:
      tags:
        - task
      security:
        - bearerAuth: [ "user" ]
      responses:
        200:
          description: The requested task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        404:
          description: When the task couldn't be found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /course:
    post:
      tags:
        - course
      security:
        - bearerAuth: [ "creator" ]
      responses:
        201:
          description: Creates a new course to which tasks and users can be added
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          description: Gets returned when the user is not a creator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    get:
      tags:
        - course
      security:
        - bearerAuth: [ "user" ]
      responses:
        200:
          description: Gets a list of all available courses
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Course"
        401:
          $ref: "#/components/responses/UnauthorizedError"
  /course/{id}/task:
    parameters:
      - name: id
        in: path
        schema:
          type: string
          format: uuid
    post:
      tags:
        - course
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
      responses:
        200:
          description: Returns the updated course
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Course"
        401:
          $ref: "#/components/responses/UnauthorizedError"
        403:
          description: Gets returned when the user is not a creator
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
  schemas:
    Task:
      type: object
      properties:
        id:
          type: string
          readOnly: true
        title:
          type: string
        type:
          type: string
          enum:
            - DEFAULT
            - SINGLE_CHOICE
            - MULTIPLE_CHOICE
            - FIFTY_FIFTY
            - GAP_TEXT
            - WORD_MATCH
            - SENTENCE_COMPLETION
        description:
          $ref: "#/components/schemas/TextMediaElement"
        score:
          type: number
          format: double
        solutions:
          type: array
          items:
            $ref: "#/components/schemas/Solution"
        hint:
          $ref: "#/components/schemas/TextMediaElement"
        recommendations:
          type: array
          items:
            type: string
        value:
          type: string

    Solution:
      type: object
      properties:
        value:
          type: string
        correct:
          type: boolean
    TextMediaElement:
      type: object
      properties:
        text:
          type: string
        imgData:
          type: array
          items:
            type: string
    CourseRequest:
      type: object
      properties:
        title:
          type: string
        description:
          $ref: "#/components/schemas/TextMediaElement"
    Course:
      type: object
      properties:
        id:
          type: string
          format: uuid
        title:
          type: string
        author:
          type: string
        description:
          $ref: "#/components/schemas/TextMediaElement"
        creationDate:
          type: string
        changeDate:
          type: string
        tasks:
          type: array
          items:
            type: string
    Credentials:
      type: object
      properties:
        username:
          type: string
          example: "max.musterman"
        password:
          type: string
          example: "MusterPassword123"
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
        groups:
          type: array
          items:
            type: string
    Error:
      type: object
      properties:
        message:
          type: string
