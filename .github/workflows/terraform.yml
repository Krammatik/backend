name: "Terraform"

on:
  push:
    branches:
      - master
  pull_request:

jobs:
  build:
    name: "Build"
    runs-on: ubuntu-latest
    environment: production
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
      - name: Build with Gradle
        uses: gradle/gradle-build-action@937999e9cc2425eddc7fd62d1053baf041147db7
        with:
          arguments: build
      - name: Upload jar
        uses: actions/upload-artifact@v2
        with:
          name: backend.jar
          path: build/libs/backend.jar
          retention-days: 1
  terraform:
    name: "Terraform"
    runs-on: ubuntu-latest
    environment: production
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      ENCRYPT_SECRET: ${{ secrets.ENCRYPT_SECRET }}
    defaults:
      run:
        shell: bash
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Create dir
        run: mkdir -p ./build/libs/

      - name: Download jar
        uses: actions/download-artifact@v2
        with:
          name: backend.jar
          path: ./build/libs/

      # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        working-directory: ./terraform
        run: terraform fmt -check

      # Generates an execution plan for Terraform
      - name: Terraform Plan
        working-directory: ./terraform
        run: |
          terraform plan -var="app_version=${GITHUB_SHA::7}" -var="encrypt_secret=${ENCRYPT_SECRET}"

        # On push to master, build or change infrastructure according to Terraform configuration files
        # Note: It is recommended to set up a required "strict" status check in your repository for "Terraform Cloud". See the documentation on "strict" required status checks for more information: https://help.github.com/en/github/administering-a-repository/types-of-required-status-checks
      - name: Terraform Apply
        if: github.ref == 'refs/heads/master' && github.event_name == 'push'
        run: |
          terraform apply -auto-approve -var="app_version=${GITHUB_SHA::7}" -var="encrypt_secret=${ENCRYPT_SECRET}"
        working-directory: ./terraform
